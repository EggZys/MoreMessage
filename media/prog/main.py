import flet as ft
import requests
import json
import re
import time
import logging
from passlib.hash import django_pbkdf2_sha256
from datetime import datetime
import socket
import asyncio
import websockets

hostname = socket.gethostname()
ip_address = socket.gethostbyname(hostname)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="auth.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_LOGIN_ATTEMPTS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
BLOCK_TIME = 60  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫

class ChatInterface:
    def __init__(self, page, username, theme_mode, language, auth_token):
        self.page = page
        self.username = username
        self.theme_mode = theme_mode
        self.language = language
        self.auth_token = auth_token
        self.messages = []
        self.ws = None  # WebSocket –∫–ª–∏–µ–Ω—Ç
        self.initialize_ui()
        asyncio.create_task(self.connect_websocket())  # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
    
    async def connect_websocket(self):
        """üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket"""
        try:
            self.ws = await websockets.connect("ws://127.0.0.1:8000/ws/chat/")
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket!")

            while True:
                message = await self.ws.recv()
                data = json.loads(message)
                print(f"üì• [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")  # üëÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –ª–∏ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                self.messages.append(data)
                self.update_chat_display()  # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
        except Exception as e:
            print(f"‚ùå [WebSocket] –û—à–∏–±–∫–∞: {e}")

    def load_user_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get("http://127.0.0.1:8000/api/users/")
            if response.status_code == 200:
                data = response.json()
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                users = json.loads(data["users"]) 
                
                # –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for user in users:
                    if user["fields"]["username"] == self.username:
                        return {
                            "username": user["fields"]["username"],
                            "email": user["fields"]["email"] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                            "avatar": "üë§"
                        }
                return self.default_user_data()
            
            logging.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return self.default_user_data()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return self.default_user_data()

    def default_user_data(self):
        return {
            "username": self.username,
            "email": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ@example.com",
            "avatar": "üë§"
        }

    def initialize_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        self.page.clean()
        self.page.title = self.translate("Global Chat")
        self.page.theme_mode = self.theme_mode
        self.page.padding = 20
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.bg_color = ft.Colors.BLUE_GREY_900 if self.theme_mode == ft.ThemeMode.DARK else ft.Colors.GREY_100
        self.text_color = ft.Colors.WHITE if self.theme_mode == ft.ThemeMode.DARK else ft.Colors.BLACK
        self.primary_color = ft.Colors.BLUE_ACCENT_700
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        self.profile_button = ft.IconButton(
            icon=ft.Icons.ACCOUNT_CIRCLE,
            icon_size=40,
            icon_color=self.primary_color,
            on_click=self.show_profile_modal
        )
        
        self.header = ft.Row(
            [
                ft.Text(
                    self.translate("–ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç"), 
                    size=28, 
                    weight=ft.FontWeight.BOLD,
                    color=self.primary_color
                ),
                self.profile_button
            ],
            alignment=ft.MainAxisAlignment.SPACE_BETWEEN
        )
        
        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_messages = ft.ListView(
            expand=True,
            spacing=15,
            padding=15,
            auto_scroll=True
        )
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.new_message = ft.TextField(
            label=self.translate("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."),
            multiline=True,
            min_lines=1,
            max_lines=5,
            border_radius=20,
            filled=True,
            expand=True,
            on_submit=self.send_message,
            border_color=self.primary_color
        )
        
        self.send_button = ft.IconButton(
            icon=ft.Icons.SEND_ROUNDED,
            icon_size=32,
            icon_color=self.primary_color,
            tooltip=self.translate("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
            on_click=self.send_message
        )
        
        # –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.page.add(
            self.header,
            ft.Container(
                content=self.chat_messages,
                border=ft.border.all(2, self.primary_color),
                border_radius=20,
                padding=20,
                expand=True,
                bgcolor=self.bg_color,
                shadow=ft.BoxShadow(
                    spread_radius=2,
                    blur_radius=15,
                    color=ft.Colors.BLACK if self.theme_mode == ft.ThemeMode.DARK else ft.Colors.GREY_400,
                )
            ),
            ft.Row(
                [self.new_message, self.send_button],
                spacing=15,
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                vertical_alignment=ft.CrossAxisAlignment.END
            )
        )
        
        self.load_messages()
        self.page.update()

    def show_profile_modal(self, e):
        """–û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.user_data = self.load_user_data() 
        
        profile_content = ft.Column([
            ft.ListTile(
                leading=ft.Text(self.user_data["avatar"], size=32),
                title=ft.Text(
                    self.user_data["username"], 
                    weight=ft.FontWeight.BOLD,
                    color=self.primary_color
                ),
                subtitle=ft.Text(
                    self.user_data["email"],
                    style=ft.TextStyle(color=ft.Colors.GREY)
                ),
            ),
            ft.Divider(),
            ft.ElevatedButton(
                text=self.translate("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                icon=ft.Icons.SETTINGS,
                on_click=self.show_settings_modal,
                style=ft.ButtonStyle(
                    shape=ft.RoundedRectangleBorder(radius=10),
                    padding=15
                )
            )
        ], tight=True)
        
        self.profile_modal = ft.AlertDialog(
            title=ft.Text(self.translate("–ü—Ä–æ—Ñ–∏–ª—å")),
            content=profile_content,
            shape=ft.RoundedRectangleBorder(radius=20)
        )
        
        self.page.dialog = self.profile_modal
        self.profile_modal.open = True
        self.page.update()

    def show_settings_modal(self, e):
        """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        theme_switch = ft.Switch(
            label=self.translate("–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"),
            value=self.theme_mode == ft.ThemeMode.DARK,
            on_change=self.toggle_theme
        )
        
        language_dropdown = ft.Dropdown(
            options=[
                ft.dropdown.Option("ru", "–†—É—Å—Å–∫–∏–π"),
                ft.dropdown.Option("en", "English")
            ],
            value=self.language,
            width=120,
            on_change=self.change_language
        )
        
        settings_content = ft.Column([
            ft.ListTile(
                leading=ft.Icon(ft.Icons.COLOR_LENS),
                title=ft.Text(self.translate("–¢–µ–º–∞")),
                trailing=theme_switch,
            ),
            ft.ListTile(
                leading=ft.Icon(ft.Icons.LANGUAGE),
                title=ft.Text(self.translate("–Ø–∑—ã–∫")),
                trailing=language_dropdown,
            )
        ], spacing=15)
        
        self.settings_modal = ft.AlertDialog(
            title=ft.Text(self.translate("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")),
            content=settings_content,
            shape=ft.RoundedRectangleBorder(radius=20)
        )
        
        self.page.dialog = self.settings_modal
        self.settings_modal.open = True
        self.page.update()

    def toggle_theme(self, e):
        self.theme_mode = ft.ThemeMode.DARK if e.control.value else ft.ThemeMode.LIGHT
        self.page.theme_mode = self.theme_mode
        self.page.update()
        self.initialize_ui()  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã

    def change_language(self, e):
        current_messages = self.messages.copy()
        self.language = e.control.value
        self.page.update()
        self.initialize_ui()
        self.messages = current_messages
        self.update_chat_display()  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞

    def translate(self, text):
        """–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        return AuthApp.translate_static(self.language, text)

    def send_message(self, e):
        """‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
        message = self.new_message.value.strip()
        if not message:
            return

        timestamp = datetime.now().strftime("%H:%M:%S")

        data = {"user": self.username, "text": message}

        # üî• –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ UI, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—è–≤–∏–ª–æ—Å—å
        self.messages.append({
            "user": self.username,
            "text": message,
            "time": timestamp
        })
        self.update_chat_display()

        # üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        if self.ws:
            asyncio.create_task(self.ws.send(json.dumps(data)))

        # üßπ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.new_message.value = ""
        self.page.update()

    def load_messages(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            headers = {
                "Authorization": f"Token {self.auth_token}",
                "Content-Type": "application/json"
            }
            response = requests.get("http://127.0.0.1:8000/api/messages/", headers=headers)
            if response.status_code == 200:
                messages_data = response.json()
                logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {messages_data}")
                self.messages = []
                for msg in messages_data:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    user_response = requests.get(
                        f"http://127.0.0.1:8000/api/users/{msg['user']}/",
                        headers=headers
                    )
                    if user_response.status_code == 200:
                        user_data = user_response.json()
                        username = user_data.get('username', 'unknown')
                    else:
                        username = 'unknown'
                    
                    self.messages.append({
                        "user": username,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–º—è
                        "text": msg['text'],
                        "time": datetime.strptime(msg['created_at'], "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%H:%M:%S")
                    })
                self.update_chat_display()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

    def update_chat_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.chat_messages.controls = [
            ft.ListTile(
                title=ft.Text(f"{msg['user']} ({msg['time']})"),
                subtitle=ft.Text(msg['text']),
            ) for msg in self.messages
        ]
        self.page.update()
    
    def create_message_bubble(self, message: dict):
        is_my_message = message["user"] == self.username
        return ft.Container(
            content=ft.Column([
                ft.Text(
                    f"{message['user']} ‚Ä¢ {message['time']}",
                    size=12,
                    color=ft.Colors.GREY_500
                ),
                ft.Text(
                    message["text"], 
                    size=16,
                    color=self.text_color,
                    width=300,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                    max_lines=10,
                    overflow=ft.TextOverflow.ELLIPSIS
                )
            ], spacing=5),
            bgcolor=self.primary_color if is_my_message else ft.Colors.ON_SURFACE_VARIANT,
            padding=15,
            border_radius=15,
            alignment=ft.alignment.center_left,
            margin=ft.margin.only(
                left=100 if not is_my_message else 0,
                right=0 if not is_my_message else 100
            ),
            width=300  # –®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        )


    def update_chat_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        self.chat_messages.controls = [
            self.create_message_bubble(msg) for msg in self.messages
        ]
        self.page.update()

    def logout(self, e):
        """–í—ã—Ö–æ–¥ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.page.clean()
        AuthApp(self.page)

class AuthApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.login_attempts = 3
        self.last_failed_attempt = None
        self.language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        self.theme_mode = ft.ThemeMode.DARK  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.initialize_ui()

    def initialize_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.page.title = self.translate("Secure Auth")
        self.page.theme_mode = self.theme_mode
        self.page.vertical_alignment = ft.MainAxisAlignment.CENTER
        self.page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
        self.page.bgcolor = ft.Colors.BLUE_GREY_900 if self.theme_mode == ft.ThemeMode.DARK else ft.Colors.GREY_100

        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.username_field = ft.TextField(
            label=self.translate("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email"),
            border_radius=15,
            prefix_icon=ft.Icons.PERSON,
            width=300,
            on_change=self.validate_fields
        )

        self.password_field = ft.TextField(
            label=self.translate("–ü–∞—Ä–æ–ª—å"),
            password=True,
            can_reveal_password=True,
            border_radius=15,
            prefix_icon=ft.Icons.LOCK,
            width=300,
            on_change=self.validate_fields
        )

        self.error_banner = ft.Container(
            bgcolor=ft.Colors.RED_700,
            padding=10,
            border_radius=10,
            visible=False,
            animate_opacity=300,
            content=ft.Text("", color=ft.Colors.WHITE)
        )

        self.loading_indicator = ft.Container(
            content=ft.Column(
                [
                    ft.ProgressRing(width=30, height=30, stroke_width=2),
                    ft.Text(self.translate("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ..."), size=12)
                ],
                spacing=10,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER
            ),
            visible=False,
            animate_opacity=300,
            alignment=ft.alignment.center
        )

        self.login_button = ft.ElevatedButton(
            text=self.translate("–í–æ–π—Ç–∏"),
            icon=ft.Icons.LOGIN,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10),
                padding=20,
                bgcolor=ft.Colors.BLUE_700,
                overlay_color=ft.Colors.BLUE_900
            ),
            width=200,
            animate_opacity=300,
            on_click=self.login_click
        )

        # –ö–∞–ø—á–∞
        self.captcha_field = ft.TextField(
            label=self.translate("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É"),
            border_radius=15,
            width=300,
            visible=False
        )
        self.captcha_image = ft.Image(
            src="https://via.placeholder.com/150",
            width=150,
            height=50,
            visible=False
        )

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
        self.language_switcher = ft.Dropdown(
            options=[
                ft.dropdown.Option("ru", "–†—É—Å—Å–∫–∏–π"),
                ft.dropdown.Option("en", "English")
            ],
            value=self.language,
            width=100,
            on_change=self.change_language
        )

        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.username_field = ft.TextField(
            label=self.translate("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email"),
            border_radius=15,
            prefix_icon=ft.Icons.PERSON,
            width=300,
            on_change=self.validate_fields
        )

        self.password_field = ft.TextField(
            label=self.translate("–ü–∞—Ä–æ–ª—å"),
            password=True,
            can_reveal_password=True,
            border_radius=15,
            prefix_icon=ft.Icons.LOCK,
            width=300,
            on_change=self.validate_fields
        )

        self.error_banner = ft.Container(
            bgcolor=ft.Colors.RED_700,
            padding=10,
            border_radius=10,
            visible=False,
            animate_opacity=300,
            content=ft.Text("", color=ft.Colors.WHITE)
        )

        self.loading_indicator = ft.Container(
            content=ft.Column(
                [
                    ft.ProgressRing(width=30, height=30, stroke_width=2),
                    ft.Text(self.translate("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ..."), size=12)
                ],
                spacing=10,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER
            ),
            visible=False,
            animate_opacity=300,
            alignment=ft.alignment.center
        )

        self.login_button = ft.ElevatedButton(
            text=self.translate("–í–æ–π—Ç–∏"),
            icon=ft.Icons.LOGIN,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10),
                padding=20,
                bgcolor=ft.Colors.BLUE_700,
                overlay_color=ft.Colors.BLUE_900
            ),
            width=200,
            animate_opacity=300,
            on_click=self.login_click
        )

        # –ö–∞–ø—á–∞
        self.captcha_field = ft.TextField(
            label=self.translate("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É"),
            border_radius=15,
            width=300,
            visible=False
        )
        self.captcha_image = ft.Image(
            src="https://via.placeholder.com/150",
            width=150,
            height=50,
            visible=False
        )

        # –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.main_card = ft.Card(
            content=ft.Container(
                content=ft.Column(
                    [
                        ft.Icon(ft.Icons.SHIELD, size=50),
                        ft.Text(self.translate("Secure Login"), size=24),
                        self.username_field,
                        self.password_field,
                        self.captcha_image,
                        self.captcha_field,
                        self.error_banner,
                        ft.Stack(
                            [self.login_button, self.loading_indicator],
                            height=60
                        )
                    ],
                    spacing=25,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER
                ),
                padding=ft.padding.symmetric(vertical=40, horizontal=30),
                width=400
            ),
            elevation=15,
            color=ft.Colors.BLUE_GREY_800 if self.theme_mode == ft.ThemeMode.DARK else ft.Colors.WHITE
        )

        self.page.add(self.main_card)

    def translate(self, text):
        """–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞."""
        translations = {
            "ru": {
                "Secure Auth": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥",
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email",
                "–ü–∞—Ä–æ–ª—å": "–ü–∞—Ä–æ–ª—å",
                "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...": "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...",
                "–í–æ–π—Ç–∏": "–í–æ–π—Ç–∏",
                "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞": "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É": "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!",
                "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!",
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫!": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!",
                "–í—ã–π—Ç–∏": "–í—ã–π—Ç–∏"
            },
            "en": {
                "Secure Auth": "Secure Auth",
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email": "Username or Email",
                "–ü–∞—Ä–æ–ª—å": "Password",
                "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...": "Checking data...",
                "–í–æ–π—Ç–∏": "Login",
                "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞": "Dark Theme",
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É": "Enter captcha",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!": "Please fill all fields!",
                "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!": "Invalid credentials!",
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫!": "Too many attempts! Try again later.",
                "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!": "Login successful!",
                "–í—ã–π—Ç–∏": "Logout"
            }
        }
        return translations[self.language].get(text, text)

    def change_language(self, e):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.language = self.language_switcher.value
        self.reset_ui()

    def reset_ui(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.page.clean()
        self.initialize_ui()

    def validate_fields(self, e):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞."""
        email_regex = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
        is_email_valid = re.match(email_regex, self.username_field.value) if "@" in self.username_field.value else True
        is_password_valid = len(self.password_field.value) >= 6

        self.username_field.error_text = (
            self.translate("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email") if "@" in self.username_field.value and not is_email_valid else ""
        )
        self.password_field.error_text = (
            self.translate("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤") if not is_password_valid else ""
        )
        self.page.update()

    def login_click(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞."""
        if self.block_login():
            return

        username = self.username_field.value.strip()
        password = self.password_field.value.strip()

        self.error_banner.visible = False
        self.page.update()

        if not username or not password:
            self.error_banner.content.value = self.translate("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            self.error_banner.visible = True
            self.page.update()
            return

        self.toggle_ui_elements(True)
        time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏

        if self.validate_credentials(username, password):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            try:
                response = requests.post(
                    "http://127.0.0.1:8000/api-token-auth/",
                    data={"username": username, "password": password}
                )
                if response.status_code == 200:
                    auth_token = response.json()['token']
                    self.page.client_storage.set("auth_token", auth_token)
                    self.page.clean()
                    ChatInterface(
                        self.page, 
                        username, 
                        self.theme_mode,
                        self.language,
                        auth_token  # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
                    )
                    logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {username}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        else:
            self.login_attempts += 1
            self.last_failed_attempt = time.time()
            self.toggle_ui_elements(False)
            self.error_banner.content.value = self.translate("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            self.error_banner.visible = True
            self.show_captcha()
            logging.warning(f"Failed login attempt: {username}")
            self.page.update()

    @staticmethod
    def translate_static(lang, text):
        """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
        translations = {
            "ru": {
                "Global Chat": "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç",
                "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "–í—ã–π—Ç–∏": "–í—ã–π—Ç–∏",
                "Secure Auth": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥",
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email",
                "–ü–∞—Ä–æ–ª—å": "–ü–∞—Ä–æ–ª—å",
                "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...": "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...",
                "–í–æ–π—Ç–∏": "–í–æ–π—Ç–∏",
                "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞": "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É": "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!",
                "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!",
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫!": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!",
            },
            "en": {
                "Global Chat": "Global Chat",
                "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": "New message",
                "–í—ã–π—Ç–∏": "Logout",
                "Secure Auth": "Secure Auth",
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email": "Username or Email",
                "–ü–∞—Ä–æ–ª—å": "Password",
                "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...": "Checking data...",
                "–í–æ–π—Ç–∏": "Login",
                "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞": "Dark Theme",
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É": "Enter captcha",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!": "Please fill all fields!",
                "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!": "Invalid credentials!",
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫!": "Too many attempts! Try again later.",
                "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!": "Login successful!",
            }
        }
        return translations[lang].get(text, text)

    def validate_credentials(self, username, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        users = self.get_users()
        for user in users:
            if (user['username'] == username or user['email'] == username):
                try:
                    return django_pbkdf2_sha256.verify(password, user['password'])
                except Exception as e:
                    logging.error(f"Password check error: {e}")
                    return False
        return False

    def get_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API."""
        try:
            response = requests.get("http://127.0.0.1:8000/api/users/")
            if response.status_code == 200:
                users_data = json.loads(response.json()['users'])
                return [
                    {
                        'username': user['fields']['username'],
                        'email': user['fields']['email'],
                        'password': user['fields']['password']
                    }
                    for user in users_data
                ]
            return []
        except Exception as e:
            logging.error(f"API Error: {e}")
            return []

    def toggle_ui_elements(self, loading: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI."""
        self.login_button.disabled = loading
        self.login_button.opacity = 0 if loading else 1
        self.loading_indicator.visible = loading
        self.loading_indicator.opacity = 1 if loading else 0
        self.page.update()

    def show_captcha(self):
        """–ü–æ–∫–∞–∑ –∫–∞–ø—á–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
        if self.login_attempts >= MAX_LOGIN_ATTEMPTS:
            self.captcha_image.visible = True
            self.captcha_field.visible = True
            self.page.update()

    def block_login(self):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        if self.last_failed_attempt and (time.time() - self.last_failed_attempt) < BLOCK_TIME:
            self.error_banner.content.value = self.translate("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫!")
            self.error_banner.visible = True
            self.page.update()
            return True
        return False

def main(page: ft.Page):
    AuthApp(page)

if __name__ == "__main__":

    ft.app(target=main)
    print(f"Hostname: {hostname}")
    print(f"IP Address: {ip_address}")