import json
from channels.generic.websocket import AsyncWebsocketConsumer
from django.contrib.auth import get_user_model
import logging
from datetime import datetime
from .models import ChatMessage
from asgiref.sync import sync_to_async

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
User = get_user_model()  # –ë–µ—Ä—ë–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        """üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫ WebSocket"""
        self.room_group_name = "global_chat"
        await self.channel_layer.group_add(self.room_group_name, self.channel_name)
        await self.accept()
        logging.info(f"‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {self.channel_name}")

    async def disconnect(self, close_code):
        """‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)
        logging.info(f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {self.channel_name}")

    async def receive(self, text_data):
        """üì• –ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            data = json.loads(text_data)

            username = data.get("user", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            message = data.get("text", "")

            if not message:
                logging.warning(f"‚ö†Ô∏è [WS] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                return

            logging.info(f"üì• [SERVER] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

            # üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            user = await sync_to_async(User.objects.get)(username=username)

            # üïí –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
            chat_message = await sync_to_async(ChatMessage.objects.create)(
                user=user,
                text=message
            )

            created_at = chat_message.created_at.strftime("%Y-%m-%d %H:%M:%S") if chat_message else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

            # üì° –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    "type": "chat_message",
                    "username": username,
                    "message": message,
                    "created_at": created_at
                }
            )

        except User.DoesNotExist:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


    async def chat_message(self, event):
        """üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        await self.send(text_data=json.dumps({
            "user": event["username"],
            "text": event["message"],
            "created_at": event["created_at"]
        }))