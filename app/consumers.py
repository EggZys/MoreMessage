from .models import ChatMessage
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from django.contrib.auth import get_user_model

User = get_user_model()

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        print("üîå [WebSocket] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!")
        await self.accept()
        await self.channel_layer.group_add("chat", self.channel_name)

    async def disconnect(self, close_code):
        print("‚ùå [WebSocket] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è!")
        await self.channel_layer.group_discard("chat", self.channel_name)

    async def receive(self, text_data):
        """–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        print(f"üì• [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_data}")
        data = json.loads(text_data)
        username = data.get("user")
        message = data.get("text")

        user = await User.objects.filter(username=username).afirst()
        if user:
            await ChatMessage.objects.acreate(user=user, text=message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

        await self.channel_layer.group_send(
            "chat",
            {
                "type": "chat_message",
                "user": username,
                "text": message,
            },
        )

    async def chat_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        print(f"üì° [WebSocket] –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {event}")
        await self.send(text_data=json.dumps(event))
